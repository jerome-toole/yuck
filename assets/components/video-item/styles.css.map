{"version":3,"sources":["styles/3-pattern-mixins/_grid-classes.scss","styles/1-tools/mixins/_grid.scss","components/video-item/styles.css","styles/1-tools/mixins/_flex-grid.scss","components/video-item/styles.scss","../node_modules/sass-mq/_mq.scss","styles/3-pattern-mixins/_alignment.scss","styles/1-tools/mixins/_button-reset.scss","styles/1-tools/mixins/_interact.scss"],"names":[],"mappings":"AAAA,MCEI,kCAAA,CADA,YAAA,CAEA,gEAAA,CACA,4BCCJ,CFFI,gBCqBA,8FChBJ,CFAA,WGQI,kCAAA,CAFA,YAAA,CACA,kBAAA,CAEA,4BDFJ,CCKI,2EA0BA,8GDzBJ,CCQI,mGAII,UDNR,CEzBA,YACI,+BAAA,CACA,yCAAA,CACA,oDAAA,CAIA,iBFyBJ,CEvBI,mBAKI,WAAA,CAFA,MAAA,CAFA,iBAAA,CACA,KAAA,CAEA,UF0BR,CEtBI,mBASI,kBAAA,CAJA,QAAA,CAEA,YAAA,CACA,uBAAA,CAEA,sBAAA,CAJA,MAAA,CAKA,SAAA,CACA,mBAAA,CAXA,cAAA,CAGA,OAAA,CADA,KAAA,CAUA,2IAAA,CACA,iBAAA,CAZA,SFoCR,CEtBQ,yBAEI,YAAA,CAGA,oBAAA,CADA,eAAA,CAHA,iBAAA,CAEA,oDF0BZ,CGgHE,wBD7IM,yBEiBJ,gBAAA,CADA,iBAAA,CALI,qCJwBN,CACF,CExBQ,wBAGI,oCAAA,CACA,oCAAA,CAHA,iBAAA,CACA,UF4BZ,CExBY,+BAEI,4CAAA,CACA,UAAA,CAFA,aF4BhB,CEtBQ,yBACI,kCAAA,CACA,4CAAA,CG3CR,QAAA,CAEA,eAAA,CH+CQ,qCAAA,CG7CR,cAAA,CAEA,mBAAA,CACA,iBAAA,CACA,mBAAA,CH2CQ,iDAAA,CG1CR,sBAAA,CACA,mBAAA,CH0CQ,SAAA,CGrDR,SAAA,CHgDQ,iBAAA,CACA,OAAA,CGrCR,sBAAA,CH0CQ,yEAAA,CAHA,gDFoCZ,CMxGI,wFDmBA,wBAAA,CAEA,aLuFJ,CMtGQ,qBADJ,+BD2BI,wBAAA,CACA,aLgFN,CACF,CK9EI,+BACI,gBAAA,CACA,iBLgFR,CGyDE,wBDpHM,yBAeQ,qCFgDd,CACF,CE7CQ,0BAII,QAAA,CAGA,WAAA,CAFA,MAAA,CAGA,QAAA,CAPA,iBAAA,CAEA,OAAA,CADA,KAAA,CAIA,UFiDZ,CE5CQ,0BAMI,wBAAA,CAFA,QAAA,CAGA,UAAA,CAFA,MAAA,CAJA,cAAA,CAEA,OAAA,CADA,KAAA,CAMA,kFF8CZ,CE1CI,yBGlFA,wBAAA,CH4FI,yDAAA,CACA,6CAAA,CG9FJ,QAAA,CAEA,eAAA,CACA,aAAA,CACA,cAAA,CHsFI,YAAA,CGpFJ,mBAAA,CACA,iBAAA,CACA,mBAAA,CHoFI,WAAA,CAHA,MAAA,CGhFJ,sBAAA,CACA,mBAAA,CAXA,SAAA,CHuFI,iBAAA,CG3EJ,sBAAA,CH6EI,KAAA,CAOA,iJAAA,CAJA,UAAA,CAJA,SF8DR,CMvKI,+DDgCI,wBAAA,CACA,aL0IR,CMrKQ,qBADJ,+BD2BI,wBAAA,CACA,aL+IN,CACF,CK7II,+BACI,gBAAA,CACA,iBL+IR,CMrLI,+DJoHQ,UFoEZ,CMlLQ,qBADJ,+BJ+GQ,UFwEV,CACF,CEpEQ,gDACI,SAAA,CACA,kBAAA,CACA,kBFsEZ,CEpEY,sDACI,SFsEhB,CEnEY,uDACI,kCAAA,CACA,kBFqEhB","file":"styles.css","sourcesContent":[".grid {\n    @include grid;\n\n    &--auto-fit {\n        @include grid--auto-fit;\n    }\n}\n\n.flex-grid {\n    @include flex-grid;\n\n    &--auto {\n        @include flex-grid--auto;\n    }\n}\n","@mixin grid($columns: null, $columns--m: null, $columns--l: null) {\n    display: grid;\n    column-gap: var(--grid--column-gap);\n    grid-template-columns: repeat(var(--grid--columns), minmax(0, 1fr));\n    row-gap: var(--grid--row-gap);\n\n    @if ($columns) {\n        --grid--columns: #{$columns};\n    }\n\n    @if ($columns--m) {\n        @include mq(medium) {\n            --grid--columns: #{$columns--m};\n        }\n    }\n\n    @if ($columns--l) {\n        @include mq(large) {\n            --grid--columns: #{$columns--l};\n        }\n    }\n}\n\n@mixin grid--auto-fit {\n    grid-template-columns: repeat(auto-fill, minmax(min(var(--grid--auto--min, #{rem(250)}), 100%), 1fr));\n}\n",".grid {\n  display: grid;\n  column-gap: var(--grid--column-gap);\n  grid-template-columns: repeat(var(--grid--columns), minmax(0, 1fr));\n  row-gap: var(--grid--row-gap);\n}\n.grid--auto-fit {\n  grid-template-columns: repeat(auto-fill, minmax(min(var(--grid--auto--min, 15.625rem), 100%), 1fr));\n}\n\n.flex-grid {\n  display: flex;\n  flex-flow: row wrap;\n  column-gap: var(--grid--column-gap);\n  row-gap: var(--grid--row-gap);\n}\n.flex-grid > *,\n.flex-grid > :first-child,\n.flex-grid > :last-child,\n.flex-grid > * + * {\n  width: calc(100% / var(--grid--columns) - var(--grid--column-gap) + var(--grid--column-gap) / var(--grid--columns));\n}\n.flex-grid--auto > *,\n.flex-grid--auto > :first-child,\n.flex-grid--auto > :last-child,\n.flex-grid--auto > * + * {\n  width: auto;\n}\n\n.video-item {\n  --video-item--aspect-ratio: 16 / 9;\n  --video-item--close--size: var(--space--m);\n  --video-item--play--size: clamp(2.5rem, 20%, 4.6875rem);\n  position: relative;\n}\n.video-item__media {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n.video-item__video {\n  position: fixed;\n  z-index: 9;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity var(--transition--duration) var(--transition--ease) 0s, visibility var(--transition--duration) var(--transition--ease) 0s;\n  visibility: hidden;\n}\n.video-item__video-inner {\n  position: relative;\n  display: flex;\n  width: calc(100% - var(--space--container-padding) * 2);\n  max-height: 80vh;\n  flex-flow: row nowrap;\n}\n@media (min-width: 48em) {\n  .video-item__video-inner {\n    max-width: var(--width--responsive--l);\n    margin-right: auto;\n    margin-left: auto;\n  }\n}\n.video-item__video-wrap {\n  position: relative;\n  width: 100%;\n  background-color: var(--color--black);\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n.video-item__video-wrap::before {\n  display: block;\n  aspect-ratio: var(--video-item--aspect-ratio);\n  content: \"\";\n}\n.video-item__video-close {\n  --cross--color: var(--color--white);\n  --cross--size: var(--video-item--close--size);\n  padding: 0;\n  border: 0;\n  background-color: transparent;\n  border-radius: 0;\n  color: inherit;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  line-height: inherit;\n  text-transform: inherit;\n  position: absolute;\n  right: 0;\n  bottom: calc(100% + var(--space--xxs));\n  width: calc(var(--video-item--close--size) + 5px);\n  height: calc(var(--video-item--close--size) + 5px);\n  opacity: 0;\n  transition: opacity var(--transition--duration) var(--transition--ease) 0s;\n}\n.video-item__video-close:focus, .video-item__video-close:active {\n  background-color: transparent;\n  color: inherit;\n}\n@media (hover: hover) {\n  .video-item__video-close:hover {\n    background-color: transparent;\n    color: inherit;\n  }\n}\n.video-item__video-close:focus {\n  box-shadow: unset;\n  outline-width: 5px;\n}\n@media (min-width: 62em) {\n  .video-item__video-close {\n    bottom: calc(100% + var(--space--xxs));\n  }\n}\n.video-item__video iframe {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n}\n.video-item__video::before {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: transparent;\n  content: \"\";\n  transition: background-color var(--transition--duration) var(--transition--ease) 0s;\n}\n.video-item__play-button {\n  padding: 0;\n  border: 0;\n  background-color: transparent;\n  border-radius: 0;\n  color: inherit;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  line-height: inherit;\n  text-transform: inherit;\n  position: absolute;\n  z-index: 5;\n  top: 0;\n  left: 0;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  background: url(../../images/icons/play.svg) center no-repeat;\n  background-size: var(--video-item--play--size);\n  transition: opacity var(--transition--duration) var(--transition--ease) 0s, background-color var(--transition--duration) var(--transition--ease) 0s;\n}\n.video-item__play-button:focus, .video-item__play-button:active {\n  background-color: transparent;\n  color: inherit;\n}\n@media (hover: hover) {\n  .video-item__play-button:hover {\n    background-color: transparent;\n    color: inherit;\n  }\n}\n.video-item__play-button:focus {\n  box-shadow: unset;\n  outline-width: 5px;\n}\n.video-item__play-button:focus, .video-item__play-button:active {\n  opacity: 0.7;\n}\n@media (hover: hover) {\n  .video-item__play-button:hover {\n    opacity: 0.7;\n  }\n}\n.video-item.video-item--play .video-item__video {\n  opacity: 1;\n  pointer-events: all;\n  visibility: visible;\n}\n.video-item.video-item--play .video-item__video-close {\n  opacity: 1;\n}\n.video-item.video-item--play .video-item__video::before {\n  background-color: rgba(34, 34, 34, 0.2);\n  visibility: visible;\n}","@charset 'UTF-8';\n\n/// Mimics grid gap behaviour by creating negative margins on the top and left\n/// of the flex container and then adding top and left margins to child elements.\n///\n/// In some contexts, the mixin must be used inside a wrapper or the negative\n/// margins will throw the layout off.\n///\n/// @example scss\n///    @include flex-grid-row;\n///\n/// @access public\n\n@mixin flex-grid {\n    display: flex;\n    flex-flow: row wrap;\n    column-gap: var(--grid--column-gap);\n    row-gap: var(--grid--row-gap);\n\n    // Override child selectors used in mixins such as list-reset()\n    > *,\n    > :first-child,\n    > :last-child,\n    > * + * {\n        @include flex-grid-item;\n    }\n}\n\n@mixin flex-grid--auto {\n    > *,\n    > :first-child,\n    > :last-child,\n    > * + * {\n        width: auto;\n    }\n}\n\n/// Set items to fit a column width provided by --grid--columns and add the\n/// grid--gap between them\n///\n/// @example scss\n///    @include flex-grid-item;\n///\n/// @access public\n\n@mixin flex-grid-item {\n    width: calc((100% / var(--grid--columns)) - var(--grid--column-gap) + (var(--grid--column-gap) / var(--grid--columns)));\n}\n","@import '../../core';\n\n.video-item {\n    --video-item--aspect-ratio: 16 / 9;\n    --video-item--close--size: var(--space--m);\n    --video-item--play--size: clamp(#{rem(40)}, 20%, #{rem(75)});\n\n    $this: &;\n\n    position: relative;\n\n    &__media {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n\n    &__video {\n        position: fixed;\n        z-index: 9;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        display: flex;\n        flex-flow: column nowrap;\n        align-items: center;\n        justify-content: center;\n        opacity: 0;\n        pointer-events: none;\n        transition: transition(opacity, visibility);\n        visibility: hidden;\n\n        &-inner {\n            position: relative;\n            display: flex;\n            width: calc(100% - var(--space--container-padding) * 2);\n            max-height: 80vh;\n            flex-flow: row nowrap;\n\n            @include mq(medium) {\n                @include align-width--l;\n            }\n        }\n\n        &-wrap {\n            position: relative;\n            width: 100%;\n            background-color: var(--color--black);\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n\n            &::before {\n                display: block;\n                aspect-ratio: var(--video-item--aspect-ratio);\n                content: '';\n            }\n        }\n\n        &-close {\n            --cross--color: var(--color--white);\n            --cross--size: var(--video-item--close--size);\n\n            @include button-reset-hard;\n\n            position: absolute;\n            right: 0;\n            bottom: calc(100% + var(--space--xxs));\n            width: calc(var(--video-item--close--size) + 5px);\n            height: calc(var(--video-item--close--size) + 5px);\n            opacity: 0;\n            transition: transition(opacity);\n\n            @include mq(large) {\n                bottom: calc(100% + var(--space--xxs));\n            }\n        }\n\n        iframe {\n            position: absolute;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            margin: 0;\n        }\n\n        &::before {\n            position: fixed;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            background-color: transparent;\n            content: '';\n            transition: transition(background-color);\n        }\n    }\n\n    &__play-button {\n        @include button-reset-hard;\n\n        position: absolute;\n        z-index: 5;\n        top: 0;\n        left: 0;\n        display: flex;\n        width: 100%;\n        height: 100%;\n        background: url(#{asset-path('images/icons/play.svg')}) center no-repeat;\n        background-size: var(--video-item--play--size);\n        transition: transition(opacity, background-color);\n\n        @include interact {\n            opacity: 0.7;\n        }\n    }\n\n    &.video-item--play {\n        #{$this}__video {\n            opacity: 1;\n            pointer-events: all;\n            visibility: visible;\n\n            &-close {\n                opacity: 1;\n            }\n\n            &::before {\n                background-color: rgba(#222, 0.2);\n                visibility: visible;\n            }\n        }\n    }\n}\n","@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$breakpoints: (\n  mobile: 320px,\n  tablet: 740px,\n  desktop: 980px,\n  wide: 1300px,\n) !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   @use 'path/to/mq' with ($show-breakpoints: ('mobile', 'tablet', 'desktop'));\n///\n///\n/// @type map\n$show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// If you want to overried the media type, you can use this option.\n/// @example scss\n///   @use 'path/to/mq' with ($media-type: 'screen');\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and example\n$media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n///\n/// @example scss\n///  $font-size-in-ems: px2em(16px);\n///  p { font-size: px2em(16px); }\n///\n/// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units, then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $breakpoints\n///\n/// @example scss\n///  $tablet-width: get-breakpoint-width(tablet);\n///  @media (min-width: get-breakpoint-width(tablet)) {}\n///\n/// @requires {Variable} $breakpoints\n///\n/// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $breakpoints\n/// @param {String | Boolean} $until [false] - One of $breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$breakpoints]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $media-type\n/// @requires {Variable} $breakpoints\n/// @requires {function} px2em\n/// @requires {function} get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  @use 'path/to/mq' as *;\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge(\n      $map-sorted,\n      (\n        $key: $value,\n      )\n    );\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n    $name: $width,\n  );\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $breakpoints\n/// @requires {Variable} $show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin show-breakpoints(\n  $show-breakpoints: $show-breakpoints,\n  $breakpoints: $breakpoints\n) {\n  body:before {\n    background-color: #fcf8e3;\n    border-bottom: 1px solid #fbeed5;\n    border-left: 1px solid #fbeed5;\n    color: #c09853;\n    font: small-caption;\n    padding: 3px 6px;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: '#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})';\n      }\n    }\n  }\n}\n\n@if list.length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n","@mixin align-width--xxs($responsive: true) {\n    @if ($responsive) {\n        max-width: var(--width--responsive--xxs);\n    } @else {\n        max-width: var(--width--xxs);\n    }\n\n    margin-right: auto;\n    margin-left: auto;\n}\n\n@mixin align-width--xs($responsive: true) {\n    @if ($responsive) {\n        max-width: var(--width--responsive--s);\n    } @else {\n        max-width: var(--width--s);\n    }\n\n    margin-right: auto;\n    margin-left: auto;\n}\n\n@mixin align-width--s($responsive: true) {\n    @if ($responsive) {\n        max-width: var(--width--responsive--s);\n    } @else {\n        max-width: var(--width--s);\n    }\n\n    margin-right: auto;\n    margin-left: auto;\n}\n\n@mixin align-width--m($responsive: true) {\n    @if ($responsive) {\n        max-width: var(--width--responsive--m);\n    } @else {\n        max-width: var(--width--m);\n    }\n\n    margin-right: auto;\n    margin-left: auto;\n}\n\n@mixin align-width--l($responsive: true) {\n    @if ($responsive) {\n        max-width: var(--width--responsive--l);\n    } @else {\n        max-width: var(--width--l);\n    }\n\n    margin-right: auto;\n    margin-left: auto;\n}\n\n@mixin align-width--full-bleed {\n    max-width: 100%;\n    margin-right: auto;\n    margin-left: auto;\n}\n\n@mixin align-width--right {\n    max-width: var(--width--responsive--s);\n    margin: var(--space--responsive--s) auto;\n\n    @include mq(medium) {\n        max-width: calc(var(--width--s) / 2);\n        margin-top: var(--space--m);\n        margin-right: calc(50% - (var(--width--s) / 2));\n        margin-left: var(--space--m);\n        float: right;\n    }\n}\n\n@mixin align-width--left {\n    max-width: var(--width--responsive--s);\n    margin: var(--space--responsive--s) auto;\n\n    @include mq(medium) {\n        max-width: calc(var(--width--s) / 2);\n        margin-top: var(--space--m);\n        margin-right: var(--space--m);\n        margin-left: calc(50% - (var(--width--s) / 2));\n        float: left;\n    }\n}\n","@charset 'UTF-8';\n\n/// Reset the default styles applied to buttons\n///\n/// @example scss\n///    @include button-reset;\n///\n/// @access public\n\n// TODO refine button-reset and document usage\n@mixin button-reset {\n    // Remove default button styles\n    border: 0;\n    cursor: pointer;\n}\n\n@mixin button-reset-hard {\n    // Remove our button styles\n    padding: 0;\n    border: 0;\n    background-color: transparent;\n    border-radius: 0;\n    color: inherit;\n    cursor: pointer;\n\n    font-family: inherit;\n    font-size: inherit;\n    font-weight: inherit;\n    letter-spacing: inherit;\n    line-height: inherit;\n    text-transform: inherit;\n\n    @include interact {\n        background-color: transparent;\n        color: inherit;\n    }\n\n    &:focus {\n        box-shadow: unset;\n        outline-width: 5px;\n    }\n}\n","@mixin interact {\n    &:focus,\n    &:active {\n        @content;\n    }\n\n    &:hover {\n        @media (hover: hover) {\n            @content;\n        }\n    }\n}\n"]}